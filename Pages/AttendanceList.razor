@page "/attendance"
@using Models
@using Services
@inject AttendanceService AttendanceService

<h3>Attendance Records</h3>

<!-- Button to add a new attendance record -->
<button class="btn btn-primary mb-3" @onclick="ShowAddAttendanceModal">Add New Attendance Record</button>

@if (attendanceRecords == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>ID</th>
                <th>Employee ID</th>
                <th>Date</th>
                <th>Check-In Time</th>
                <th>Check-Out Time</th>
                <th>Total Hours</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var attendance in attendanceRecords)
            {
                <tr>
                    <td>@attendance.Id</td>
                    <td>@attendance.EmployeeId</td>
                    <td>@attendance.Date.ToShortDateString()</td>
                    <td>@attendance.CheckInTime?.ToShortTimeString()</td>
                    <td>@attendance.CheckOutTime?.ToShortTimeString()</td>
                    <td>@attendance.TotalHours?.ToString(@"hh\:mm")</td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => ShowEditAttendanceModal(attendance)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => ShowDeleteConfirmation(attendance.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Add/Edit Attendance Modal -->
@if (isModalVisible)
{
    <div class="modal show" tabindex="-1" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle</h5>
                    <button type="button" class="btn-close" @onclick="HideModal"></button>
                </div>

                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Employee ID</label>
                        <input type="number" class="form-control" @bind="selectedAttendance.EmployeeId" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Date</label>
                        <input type="date" class="form-control" @bind="selectedAttendance.Date" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Check-In Time</label>
                        <input type="time" class="form-control" @bind="selectedAttendance.CheckInTime" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Check-Out Time</label>
                        <input type="time" class="form-control" @bind="selectedAttendance.CheckOutTime" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Total Hours</label>
                        <input type="text" class="form-control" @bind="@selectedAttendance.TotalHours" disabled />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="HideModal">Close</button>
                    <button class="btn btn-primary" @onclick="async () => await SaveAttendanceRecord()" disabled="@isProcessing">Save</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (isDeleteConfirmationVisible)
{
    <div class="modal show" tabindex="-1" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Deletion</h5>
                    <button type="button" class="btn-close" @onclick="HideDeleteConfirmation"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this attendance record?</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="HideDeleteConfirmation">Cancel</button>
                    <button class="btn btn-danger" @onclick="async () => await DeleteAttendance()">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Attendance>? attendanceRecords = new List<Attendance>();
    private Attendance selectedAttendance = new Attendance();
    private bool isModalVisible = false;
    private bool isDeleteConfirmationVisible = false;
    private string modalTitle = string.Empty;
    private int attendanceToDeleteId;
    private bool isProcessing = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadAttendanceRecords();
    }

    private async Task LoadAttendanceRecords()
    {
        attendanceRecords = await AttendanceService.GetAttendanceRecordsAsync();
        StateHasChanged(); // Ensure the UI updates
    }

    private void ShowAddAttendanceModal()
    {
        selectedAttendance = new Attendance();
        modalTitle = "Add New Attendance Record";
        isModalVisible = true;
    }

    private void ShowEditAttendanceModal(Attendance attendance)
    {
        // Create a deep copy of the attendance record to edit
        selectedAttendance = new Attendance
        {
            Id = attendance.Id,
            EmployeeId = attendance.EmployeeId,
            Date = attendance.Date,
            CheckInTime = attendance.CheckInTime,
            CheckOutTime = attendance.CheckOutTime,
            TotalHours = attendance.TotalHours
        };
        modalTitle = "Edit Attendance Record";
        isModalVisible = true;
    }

    private async Task SaveAttendanceRecord()
    {
        isProcessing = true; // Disable the save button
        try
        {
            CalculateTotalHours(); // Calculate total hours before saving

            if (selectedAttendance.Id == 0)
            {
                // Add new record
                int newId = await AttendanceService.AddAttendanceRecordAsync(selectedAttendance);
                selectedAttendance.Id = newId; // Set the new ID returned from the service
                attendanceRecords.Add(selectedAttendance); // Add the new record directly to the list
                
            }
            await LoadAttendanceRecords();
            else
            {
                // Update existing record
                await AttendanceService.UpdateAttendanceRecordAsync(selectedAttendance);

                // Update the list with the edited record
                var index = attendanceRecords.FindIndex(a => a.Id == selectedAttendance.Id);
                if (index != -1)
                {
                    attendanceRecords[index] = selectedAttendance;
                }
            }

            StateHasChanged(); // Force re-render to reflect changes in the UI
        }
        catch (HttpRequestException httpEx)
        {
            Console.WriteLine($"Error during the API call: {httpEx.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected error: {ex.Message}");
        }
        finally
        {
            isProcessing = false; // Re-enable the save button
            HideModal(); // Ensure the modal is closed
        }
    }

    private void HideModal()
    {
        isModalVisible = false;
    }

    private void CalculateTotalHours()
    {
        if (selectedAttendance.CheckInTime.HasValue && selectedAttendance.CheckOutTime.HasValue)
        {
            TimeSpan totalHours = selectedAttendance.CheckOutTime.Value - selectedAttendance.CheckInTime.Value;
            selectedAttendance.TotalHours = totalHours; // Set the calculated total hours
        }
    }

    private void ShowDeleteConfirmation(int id)
    {
        attendanceToDeleteId = id;
        isDeleteConfirmationVisible = true;
    }

    private void HideDeleteConfirmation()
    {
        isDeleteConfirmationVisible = false;
    }

    private async Task DeleteAttendance()
    {
        await AttendanceService.DeleteAttendanceRecordAsync(attendanceToDeleteId);
        isDeleteConfirmationVisible = false;
        await LoadAttendanceRecords(); // Refresh the attendance list
    }
}
